{"version":3,"sources":["logo.svg","assets/images/logo.png","store/reducers/index.js","store/actions/types.js","store/index.js","config/firebase.js","assets/images/image.js","components/Header/index.js","components/ChatList/index.js","components/MessageHeader/index.js","components/Message/index.js","components/MessageForm/index.js","components/Messages/index.js","components/Layout/index.js","store/actions/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","initialState","currentUser","messageId","root_reducer","combineReducers","user","state","arguments","length","undefined","action","type","Object","objectSpread","payload","current_user","store","createStore","composeWithDevTools","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","images","logo","require","googleAuth","auth","GoogleAuthProvider","Header","buttonLoading","firebaseUserRef","database","ref","presenceRef","handleLogin","_this","setState","signInWithPopup","then","console","log","createUser","catch","err","handleLogout","child","props","uid","remove","signOut","userValue","displayName","email","photoURL","uniqueName","friendsList","_ref","set","this","_this$props","profilePic","react_default","a","createElement","className","src","Popup","trigger","position","on","Divider","Button","primary","onClick","loading","disabled","Component","connect","ChatList","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","activeItem","firebaseChatListRef","firebaseProfileRef","messagesRef","chatList","chatTemplate","searchKey","userList","key","searchLoading","presenceList","presenceListener","snapshot","push","val","filter","handleChange","_","debounce","e","target","value","searchChatList","_this$state","orderByChild","equalTo","concat","chat","renderUserList","chatListListener","renderChatList","handleItemClick","name","activeMessage","checkUserIsFriend","indexOf","createMsg","message","receiverName","receiverId","receiverPic","senderDetails","senderId","senderName","senderPic","timestamp","ServerValue","TIMESTAMP","addMeAsFriend","_this$state2","update","_this$state3","statusRef","status","onDisconnect","map","i","found","Menu","Item","active","Image","avatar","_this$state4","Label","color","_this2","_this$state5","Fragment","vertical","size","fluid","Input","icon","placeholder","onChange","persist","Message","modalOpen","handleOpen","url","modalToggle","isOwnMessage","createdBy","timeFromNow","moment","fromNow","Comment","Avatar","Content","Author","as","Metadata","Text","messageContent","MessageForm","firebaseMessagesRef","notifyA","toast","createMessage","sendMessage","Segment","react_toastify","POSITION","TOP_RIGHT","style","marginBottom","label","labelPosition","Group","widths","content","Messages","image","messages","handleClose","displayMessagesListener","displayMessages","messageTemplete","components_Message","nextProps","components_MessageForm","Modal","open","onClose","wrapped","Description","elements_Header_Header","Layout","setActiveMessage","components_Header","padding","Grid","GridRow","GridColumn","mobile","computer","components_ChatList","components_Messages","App","onAuthStateChanged","setUser","clearUser","Dimmer","Loader","components_Layout","Boolean","window","location","hostname","match","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b2f332de.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.451e317d.png\";","import { combineReducers } from \"redux\";\r\nimport * as actionTypes from \"../actions/types\";\r\n\r\nconst initialState = {\r\n  currentUser: null,\r\n  messageId: null\r\n};\r\n\r\nconst user_reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.SET_USER:\r\n      return {\r\n        ...state,\r\n        currentUser: action.payload.current_user\r\n      };\r\n    case actionTypes.CLEAR_USER:\r\n      return {\r\n        ...state,\r\n        currentUser: null,\r\n        messageId: null\r\n      };\r\n    case actionTypes.ACTIVE_MESSAGE:\r\n      return {\r\n        ...state,\r\n        messageId: action.messageId\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst root_reducer = combineReducers({\r\n  user: user_reducer\r\n});\r\n\r\nexport default root_reducer;\r\n","const SET_USER = \"SET_USER\";\r\nconst CLEAR_USER = \"CLEAR_USER\";\r\nconst ACTIVE_MESSAGE = \"ACTIVE_MESSAGE\"\r\n\r\nexport { SET_USER, CLEAR_USER, ACTIVE_MESSAGE };\r\n","import { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport { createStore } from \"redux\";\r\nimport root_reducer from \"./reducers\";\r\n\r\nconst store = createStore(root_reducer, composeWithDevTools())\r\n\r\nexport default store","import firebase from \"firebase\";\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAKtxUcBXaxMti9m6bWzNvzaFdQmozbn7Y\",\r\n  authDomain: \"mychatroom-b2f28.firebaseapp.com\",\r\n  databaseURL: \"https://mychatroom-b2f28.firebaseio.com\",\r\n  projectId: \"mychatroom-b2f28\",\r\n  storageBucket: \"mychatroom-b2f28.appspot.com\",\r\n  messagingSenderId: \"768250175875\",\r\n  appId: \"1:768250175875:web:8dadc6640e9dbd71\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\nexport default firebase;\r\n","const images={\r\n    logo: require('./logo.png')\r\n}\r\n\r\nexport default images","import React, { Component } from \"react\";\r\nimport { Button, Popup, Icon, Divider } from \"semantic-ui-react\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport firebase from \"../../config/firebase\";\r\nimport \"./Header.css\";\r\nimport images from \"../../assets/images/image\";\r\n\r\nconst googleAuth = new firebase.auth.GoogleAuthProvider();\r\n\r\nclass Header extends Component {\r\n  state = {\r\n    buttonLoading: false,\r\n    firebaseUserRef: firebase.database().ref(\"users\"),\r\n    presenceRef: firebase.database().ref(\"presence\"),\r\n  };\r\n  componentDidMount() {\r\n    // this.handleLogin();\r\n  }\r\n  handleLogin = () => {\r\n    this.setState({\r\n      buttonLoading: true\r\n    });\r\n    const login = firebase.auth().signInWithPopup(googleAuth);\r\n    login\r\n      .then(user => {\r\n        console.log(\"completed\");\r\n        this.createUser(user);\r\n        this.setState({\r\n          buttonLoading: false\r\n        });\r\n      })\r\n      .catch(err => {\r\n        console.log(\"err...\", err);\r\n        this.setState({\r\n          buttonLoading: false\r\n        });\r\n      });\r\n  };\r\n\r\n  handleLogout = () => {\r\n    this.state.presenceRef.child(this.props.user.uid).remove();\r\n    firebase.auth().signOut();\r\n  };\r\n\r\n  userValue = user => {\r\n    return {\r\n      displayName: user.displayName,\r\n      email: user.email,\r\n      uid: user.uid,\r\n      photoURL: user.photoURL,\r\n      uniqueName: \"\",\r\n      friendsList: [\"welcome\"]\r\n    };\r\n  };\r\n\r\n  createUser = ({ user }) => {\r\n    const { firebaseUserRef } = this.state;\r\n    console.log(user);\r\n    firebaseUserRef.child(user.uid).set(this.userValue(user));\r\n    console.log(\"user updated!!\", user);\r\n  };\r\n  render() {\r\n    const { buttonLoading } = this.state;\r\n    const { profilePic, user } = this.props;\r\n    return (\r\n      <div className=\"header_container\">\r\n        <div className=\"logo\">\r\n          <img src={images.logo} />\r\n        </div>\r\n        <ul>\r\n          {user ? (\r\n            <li>\r\n              <Popup\r\n                trigger={\r\n                  <a className=\"pic_area\">\r\n                    <img className=\"profile_pic\" src={user.photoURL} />\r\n                  </a>\r\n                }\r\n                position=\"bottom right\"\r\n                on=\"click\"\r\n              >\r\n                <div>\r\n                  <Divider />\r\n                  <Button primary onClick={this.handleLogout}>\r\n                    Logout\r\n                  </Button>\r\n                </div>\r\n              </Popup>\r\n            </li>\r\n          ) : (\r\n            <li>\r\n              <Button\r\n                primary\r\n                onClick={this.handleLogin}\r\n                loading={buttonLoading}\r\n                disabled={buttonLoading}\r\n              >\r\n                Login\r\n              </Button>\r\n            </li>\r\n          )}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  // console.log(\"state.user.current_user..\",state.user.current_user.photoURL)\r\n  return {\r\n    user: state.user.currentUser\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  null\r\n)(Header);\r\n","import React, { Component } from \"react\";\r\nimport { Input, Label, Menu, Image, Button } from \"semantic-ui-react\";\r\nimport _ from \"lodash\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport firebase from \"../../config/firebase\";\r\nimport \"./ChatList.css\";\r\n\r\nclass ChatList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  state = {\r\n    activeItem: \"inbox\",\r\n    firebaseChatListRef: firebase.database().ref(\"users\"),\r\n    firebaseProfileRef: firebase.database(),\r\n    messagesRef: firebase.database().ref(\"messages\"),\r\n    presenceRef: firebase.database().ref(\"presence\"),\r\n    chatList: [],\r\n    chatTemplate: [],\r\n    searchKey: \"\",\r\n    userList: [],\r\n    key: null,\r\n    searchLoading: false,\r\n    presenceList: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.chatListListener();\r\n    this.presenceListener();\r\n  }\r\n\r\n  presenceListener = () => {\r\n    let presenceList = [];\r\n    this.state.presenceRef.on(\"child_added\", snapshot => {\r\n      presenceList.push(snapshot.val());\r\n      console.log(\"console beffore push\", this.state.presenceList);\r\n      this.setState({ presenceList }, () =>\r\n        console.log(\"child_added state data...\", this.state.presenceList)\r\n      );\r\n    });\r\n    this.state.presenceRef.on(\"child_removed\", snapshot => {\r\n      let remove = snapshot.val();\r\n      let filter = presenceList.filter(presenceList => {\r\n        return presenceList.uid !== remove.uid;\r\n      });\r\n      this.setState({ presenceList: filter });\r\n      console.log(\" child_removed state data...\", this.state.presenceList);\r\n    });\r\n  };\r\n\r\n  handleChange = _.debounce(e => {\r\n    console.log(this.state.searchKey);\r\n    this.setState(\r\n      {\r\n        searchKey: e.target.value,\r\n        searchLoading: false\r\n      },\r\n      () => this.searchChatList()\r\n    );\r\n  }, 1500);\r\n\r\n  // getTheUserList = () => {\r\n  //   const { firebaseProfileRef } = this.state;\r\n  //   firebaseProfileRef\r\n  //     .ref(this.props.user.uid)\r\n  //     .child(\"messages/direct\")\r\n  //     .on(\"child_added\", snapshot => {});\r\n  // };\r\n\r\n  searchChatList = () => {\r\n    let userList = [];\r\n    const { firebaseChatListRef, searchKey } = this.state;\r\n    this.setState({\r\n      userList: []\r\n    });\r\n    if (searchKey.length == 0) {\r\n      // this.chatListListener();\r\n    } else {\r\n      firebaseChatListRef\r\n        .orderByChild(\"displayName\")\r\n        // .startAt(`${searchKey}`)\r\n        // .endAt(`${searchKey}\\uf8ff`)\r\n        .equalTo(`${searchKey}`)\r\n        .on(\"child_added\", snapshot => {\r\n          let chat = snapshot.val();\r\n          userList.push(chat);\r\n          this.setState(\r\n            {\r\n              userList\r\n            },\r\n            () => {\r\n              this.renderUserList();\r\n            }\r\n          );\r\n        });\r\n    }\r\n  };\r\n\r\n  chatListListener = () => {\r\n    let chatList = [];\r\n    const { firebaseProfileRef } = this.state;\r\n    firebaseProfileRef\r\n      .ref(this.props.user.uid)\r\n      .child(\"messages/direct\")\r\n      .on(\"child_added\", snapshot => {\r\n        let chat = snapshot.val();\r\n        // if (chat.uid !== this.props.user.uid) {\r\n        chatList.push(chat);\r\n        console.log(chatList);\r\n        // }\r\n        this.setState(\r\n          {\r\n            chatList\r\n          },\r\n          () => {\r\n            this.renderChatList();\r\n          }\r\n        );\r\n      });\r\n  };\r\n\r\n  handleItemClick = (e, { name }) => {\r\n    this.setState({ activeItem: name }, () =>\r\n      console.log(\"item Clicked!!!\", name)\r\n    );\r\n    this.props.activeMessage(name);\r\n  };\r\n\r\n  checkUserIsFriend = chat => {\r\n    return chat.friendsList.indexOf(this.props.user.uid);\r\n  };\r\n\r\n  createMsg = (chat, message, key) => {\r\n    const { firebaseProfileRef } = this.state;\r\n    const { user } = this.props;\r\n    let newMessage = null;\r\n\r\n    this.setState({ key }, console.log(\"this.state.key\", this.state.key));\r\n    if (message === \"ownMessage\") {\r\n      newMessage = {\r\n        receiverName: chat.displayName,\r\n        receiverId: chat.uid,\r\n        receiverPic: chat.photoURL,\r\n        key: key,\r\n        senderDetails: {\r\n          senderId: user.uid,\r\n          senderName: user.displayName,\r\n          senderPic: user.photoURL,\r\n          timestamp: firebase.database.ServerValue.TIMESTAMP\r\n        }\r\n      };\r\n    } else {\r\n      newMessage = {\r\n        receiverName: user.displayName,\r\n        receiverId: user.uid,\r\n        receiverPic: user.photoURL,\r\n        key: key,\r\n        senderDetails: {\r\n          senderId: chat.uid,\r\n          senderName: chat.displayName,\r\n          senderPic: chat.photoURL,\r\n          timestamp: firebase.database.ServerValue.TIMESTAMP\r\n        }\r\n      };\r\n    }\r\n\r\n    return newMessage;\r\n  };\r\n\r\n  addMeAsFriend = chat => {\r\n    const { messagesRef, firebaseProfileRef } = this.state;\r\n    const key = firebaseProfileRef.ref(this.props.user.uid).push().key;\r\n    firebaseProfileRef\r\n      .ref(this.props.user.uid)\r\n      .child(`messages/direct/${chat.uid}`)\r\n      .update(this.createMsg(chat, \"ownMessage\", key));\r\n\r\n    firebaseProfileRef\r\n      .ref(chat.uid)\r\n      .child(`messages/direct/${this.props.user.uid}`)\r\n      .update(this.createMsg(chat, \"\", key));\r\n\r\n    // messagesRef.push(key).set({ message: \"hai\" });\r\n    let friendsList = [];\r\n    friendsList = chat.friendsList;\r\n    friendsList.push(this.props.user.uid);\r\n    this.state.firebaseChatListRef.child(chat.uid).update({ friendsList });\r\n    \r\n    this.setState({ searchKey: \"\" });\r\n  };\r\n\r\n  renderChatList = () => {\r\n    let chatTemplate = [];\r\n    const { chatList, activeItem } = this.state;\r\n\r\n    const createObj = (uid, status) => {\r\n      return {\r\n        uid: uid,\r\n        status: status\r\n      };\r\n    };\r\n\r\n    const statusRef = this.state.presenceRef.child(this.props.user.uid);\r\n    statusRef.set(createObj(this.props.user.uid, true));\r\n    // statusRef.onDisconnect().set(createObj(this.props.user.uid, false));\r\n    statusRef.onDisconnect().remove();\r\n\r\n    chatList &&\r\n      this.state.chatList.map((chat, i) => {\r\n        // console.log(\"chat...\", chat);\r\n        // let obj = this.state.presenceList.find(x => x.uid === chat.receiverId);\r\n        // let index = this.state.presenceList.indexOf(obj);\r\n        // // let status=false\r\n        // // if(index===1){\r\n        // //   this.state.presenceList[index]\r\n        // // }\r\n        // console.log(\"obj...\", obj);\r\n        // console.log(\"index...\", index);\r\n        let found = this.state.presenceList.filter(\r\n          presenceList => presenceList.uid === chat.receiverId\r\n        );\r\n        console.log(\"found...\", found.length);\r\n        chatTemplate.push(\r\n          <Menu.Item\r\n            name={chat.key}\r\n            active={activeItem === chat.key}\r\n            onClick={this.handleItemClick}\r\n            key={i}\r\n          >\r\n            <div className=\"avatar\">\r\n              <Image src={chat.receiverPic} avatar />\r\n              <span className={`status ${found.length >= 1 && \"active\"}`} />\r\n            </div>\r\n            <span>{chat.receiverName}</span>\r\n            {/* {index === 1 && <Label color=\"blue\">1</Label>} */}\r\n          </Menu.Item>\r\n        );\r\n      });\r\n    return chatTemplate;\r\n  };\r\n\r\n  renderUserList = () => {\r\n    console.log(\"renderUserList...\");\r\n    let chatTemplate = [];\r\n    const { activeItem, userList } = this.state;\r\n    userList &&\r\n      userList.map((chat, i) => {\r\n        if (chat.uid !== this.props.user.uid) {\r\n          chatTemplate.push(\r\n            <Menu.Item\r\n              // name=\"inbox\"\r\n              // active={activeItem === \"inbox\"}\r\n              onClick={this.handleItemClick}\r\n              key={i}\r\n            >\r\n              <Image src={chat.photoURL} avatar />\r\n              <span>{chat.displayName}</span>\r\n              {/* <Label color=\"blue\">1</Label> */}\r\n              {this.checkUserIsFriend(chat) === -1 && (\r\n                <Label color=\"blue\">\r\n                  <Button color=\"blue\" onClick={() => this.addMeAsFriend(chat)}>\r\n                    connect\r\n                  </Button>\r\n                </Label>\r\n              )}\r\n            </Menu.Item>\r\n          );\r\n        }\r\n      });\r\n    return chatTemplate;\r\n  };\r\n\r\n  render() {\r\n    const { activeItem, searchKey, searchLoading } = this.state;\r\n    return (\r\n      <React.Fragment>\r\n        <Menu vertical size=\"massive\" fluid>\r\n          <Menu.Item>\r\n            <Input\r\n              icon=\"search\"\r\n              placeholder=\"Search contact...\"\r\n              onChange={e => {\r\n                e.persist();\r\n                this.handleChange(e);\r\n                this.setState({\r\n                  searchKey: e.target.value,\r\n                  searchLoading: true\r\n                });\r\n              }}\r\n              value={searchKey}\r\n              loading={searchLoading}\r\n            />\r\n          </Menu.Item>\r\n          {searchKey.length === 0\r\n            ? this.renderChatList()\r\n            : this.renderUserList()}\r\n        </Menu>\r\n        <Button primary>ADD GROUP</Button>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    user: state.user.currentUser\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  null\r\n)(ChatList);\r\n","import React, { Component } from \"react\";\r\nimport { Segment, Header, Icon, Input } from \"semantic-ui-react\";\r\n\r\nclass MessageHeader extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Segment clearing>\r\n          <Header\r\n            floated=\"left\"\r\n            as=\"h2\"\r\n            style={{\r\n              marginBottom: 0\r\n            }}\r\n          >\r\n            <span>\r\n              Channel\r\n              <Icon name=\"star outline\" color=\"black\" />\r\n            </span>\r\n            <Header.Subheader>2 Users</Header.Subheader>\r\n          </Header>\r\n          <Header floated=\"right\">\r\n            <Input\r\n              size=\"mini\"\r\n              icon=\"search\"\r\n              name=\"SearchTerm \"\r\n              placeholder=\"Search Messages\"\r\n            />\r\n          </Header>\r\n        </Segment>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MessageHeader;\r\n","import React, { Component } from \"react\";\r\nimport { Comment } from \"semantic-ui-react\";\r\nimport moment from \"moment\";\r\n\r\nclass Message extends Component {\r\n  state = { modalOpen: false };\r\n\r\n  handleOpen = url => {\r\n    this.setState({ modalOpen: true }, () =>\r\n      this.props.modalToggle(this.state.modalOpen, url)\r\n    );\r\n  };\r\n\r\n  isOwnMessage = (message, user) => {\r\n    return message.createdBy.senderId === user.uid ? \"message__self\" : \"\";\r\n  };\r\n\r\n  timeFromNow = timestamp => moment(timestamp).fromNow();\r\n\r\n  render() {\r\n    const { message, user } = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <Comment>\r\n          <Comment.Avatar\r\n            src={message.createdBy.senderPic}\r\n            onClick={() => this.handleOpen(message.createdBy.senderPic)}\r\n          />\r\n          <Comment.Content className={this.isOwnMessage(message, user)}>\r\n            <Comment.Author as=\"a\">\r\n              {message.createdBy.senderName}\r\n            </Comment.Author>\r\n            <Comment.Metadata>\r\n              {this.timeFromNow(message.timestamp)}\r\n            </Comment.Metadata>\r\n            <Comment.Text>{message.messageContent}</Comment.Text>\r\n          </Comment.Content>\r\n        </Comment>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Message;\r\n","import React, { Component } from \"react\";\r\nimport { Segment, Input, Button } from \"semantic-ui-react\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nimport firebase from \"../../config/firebase\";\r\n\r\nclass MessageForm extends Component {\r\n  state = {\r\n    message: \"\",\r\n    firebaseMessagesRef: firebase.database().ref(\"message\")\r\n  };\r\n\r\n  notifyA = () => toast('Please select the chat!!');\r\n\r\n  createMessage = user => {\r\n    const { message } = this.state;\r\n    const newMessage = {\r\n      createdBy: {\r\n        senderId: user.uid,\r\n        senderName: user.displayName,\r\n        senderPic: user.photoURL\r\n      },\r\n      messageContent: message,\r\n      timestamp: firebase.database.ServerValue.TIMESTAMP\r\n    };\r\n    return newMessage;\r\n  };\r\n\r\n  sendMessage = (user, messageId) => {\r\n    const { message, firebaseMessagesRef } = this.state;\r\n    if (message && messageId) {\r\n      firebaseMessagesRef\r\n        .child(messageId)\r\n        .push(this.createMessage(user))\r\n        .then(() => {\r\n          this.setState({ message: \"\" });\r\n        });\r\n    } else {\r\n      this.notifyA();\r\n    }\r\n  };\r\n  render() {\r\n    const { message } = this.state;\r\n    const { user, messageId } = this.props;\r\n    return (\r\n      <Segment className=\"message__form\">\r\n        <ToastContainer\r\n          position={toast.POSITION.TOP_RIGHT}\r\n        />\r\n        <Input\r\n          fluid\r\n          name=\"Message\"\r\n          style={{\r\n            marginBottom: \"0.7em\"\r\n          }}\r\n          //   value={Message}\r\n          label={<Button icon=\"add\" />}\r\n          labelPosition=\"left\"\r\n          placeholder=\"Write your message\"\r\n          value={message}\r\n          onChange={e => this.setState({ message: e.target.value })}\r\n          //   className={Errors.some(error => error.message.includes(\"message\")) ?'error':''}\r\n        />\r\n        <Button.Group widths=\"2\" icon>\r\n          <Button\r\n            color=\"orange\"\r\n            content=\"Add Reply\"\r\n            labelPosition=\"left\"\r\n            icon=\"edit\"\r\n            onClick={() => this.sendMessage(user, messageId)}\r\n            // disabled={Loading}\r\n            // loading={Loading}\r\n          />\r\n          <Button\r\n            color=\"teal\"\r\n            content=\"Upload Media\"\r\n            labelPosition=\"right\"\r\n            icon=\"cloud upload\"\r\n            // onClick={this.openModal}\r\n          />\r\n          {/* <FileModal IsModalVisible={IsModalVisible} closeModal={this.closeModal}/> */}\r\n        </Button.Group>\r\n      </Segment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MessageForm;\r\n","import React, { Component } from \"react\";\r\nimport MessageHeader from \"../MessageHeader\";\r\nimport {\r\n  Comment,\r\n  Segment,\r\n  Button,\r\n  Header,\r\n  Image,\r\n  Modal\r\n} from \"semantic-ui-react\";\r\n\r\nimport firebase from \"../../config/firebase\";\r\nimport Message from \"../Message\";\r\nimport MessageForm from \"../MessageForm\";\r\n\r\nclass Messages extends Component {\r\n  state = {\r\n    modalToggle: false,\r\n    image: null,\r\n    firebaseMessagesRef: firebase.database().ref(\"message\"),\r\n    messages: null\r\n  };\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    this.setState({ messages: null });\r\n    this.displayMessagesListener(nextProps.messageId);\r\n  }\r\n\r\n  modalToggle = (modalToggle, image) => {\r\n    this.setState({\r\n      modalToggle,\r\n      image\r\n    });\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.setState({\r\n      modalToggle: false\r\n    });\r\n  };\r\n\r\n  displayMessagesListener = messageId => {\r\n    let messages = [];\r\n    const { firebaseMessagesRef } = this.state;\r\n    if (messageId) {\r\n      firebaseMessagesRef.child(messageId).on(\"child_added\", snapshot => {\r\n        console.log(snapshot.val());\r\n        let message = snapshot.val();\r\n        messages.push(message);\r\n        this.setState(\r\n          {\r\n            messages\r\n          },\r\n          () => {\r\n            this.displayMessages();\r\n          }\r\n        );\r\n      });\r\n    }\r\n  };\r\n\r\n  displayMessages = () => {\r\n    let messageTemplete = [];\r\n    const { messages } = this.state;\r\n    const { user } = this.props;\r\n    console.log(\"messagessss..\", messages);\r\n    messages.map((message, i) => {\r\n      console.log(\"messageContent...\", message);\r\n      messageTemplete.push(\r\n        <Message\r\n          user={user}\r\n          modalToggle={this.modalToggle}\r\n          message={message}\r\n          key={i}\r\n        />\r\n      );\r\n    });\r\n    return messageTemplete;\r\n  };\r\n\r\n  render() {\r\n    const { modalToggle, image, messages } = this.state;\r\n    const { user, messageId } = this.props;\r\n    console.log(\"messageId...\", messageId);\r\n    return (\r\n      <React.Fragment>\r\n        {/* <MessageHeader /> */}\r\n        <Segment>\r\n          <Comment.Group className=\"messages\">\r\n            {/* Messages */}\r\n            {messages && this.displayMessages()}\r\n            {/* <Message modalToggle={this.modalToggle} />\r\n            <Message />\r\n            <Message /> */}\r\n          </Comment.Group>\r\n          <MessageForm user={user} messageId={messageId} />\r\n        </Segment>\r\n        <Modal open={modalToggle} onClose={this.handleClose}>\r\n          <Modal.Header>User Name</Modal.Header>\r\n          <Modal.Content image>\r\n            <Image wrapped size=\"medium\" src={image} />\r\n            <Modal.Description>\r\n              <Header>Default Profile Image</Header>\r\n              <p>\r\n                We've found the following gravatar image associated with your\r\n                e-mail address.\r\n              </p>\r\n              <p>Is it okay to use this photo?</p>\r\n            </Modal.Description>\r\n          </Modal.Content>\r\n        </Modal>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Messages;\r\n","import React, { Component } from \"react\";\r\nimport { Grid, GridRow, GridColumn } from \"semantic-ui-react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Header from \"../Header\";\r\nimport ChatList from \"../ChatList\";\r\nimport Messages from \"../Messages\";\r\nimport { setActiveMessage } from \"../../store/actions\";\r\nimport \"./Layout.css\";\r\n\r\nclass Layout extends Component {\r\n  state = {\r\n    messageId: null\r\n  };\r\n  activeMessage = messageId => {\r\n    this.setState(\r\n      {\r\n        messageId\r\n      },\r\n      () => this.props.setActiveMessage(messageId)\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { user } = this.props;\r\n    return (\r\n      <React.Fragment>\r\n        <Header />\r\n        {user && (\r\n          <div style={{ padding: \"10px\" }}>\r\n            <Grid>\r\n              <GridRow>\r\n                <GridColumn mobile={8} computer={5}>\r\n                  <ChatList activeMessage={this.activeMessage} />\r\n                </GridColumn>\r\n                <GridColumn computer={8}>\r\n                  <Messages user={user} messageId={this.state.messageId} />\r\n                </GridColumn>\r\n              </GridRow>\r\n            </Grid>\r\n          </div>\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => {\r\n  return {\r\n    user: state.user.currentUser,\r\n    messageId: state.user.currentUser&& state.user.currentUser.messageId\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { setActiveMessage }\r\n)(Layout);\r\n","import { SET_USER, CLEAR_USER, ACTIVE_MESSAGE } from \"./types\";\r\n\r\nexport const setUser = user => {\r\n  return {\r\n    type: SET_USER,\r\n    payload: {\r\n      current_user: user\r\n    }\r\n  };\r\n};\r\n\r\nexport const clearUser = () => {\r\n  return {\r\n    type: CLEAR_USER\r\n  };\r\n};\r\n\r\nexport const setActiveMessage = (messageId) => {\r\n  return {\r\n    type: ACTIVE_MESSAGE,\r\n    messageId:messageId\r\n  };\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { setUser, clearUser } from \"./store/actions\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport firebase from \"./config/firebase\";\r\nimport { Loader, Dimmer } from \"semantic-ui-react\";\r\nimport Layout from \"./components/Layout\";\r\n// import Loader from \"./components/Loader\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    user: null,\r\n    loading: true\r\n  };\r\n  componentDidMount() {\r\n    firebase.auth().onAuthStateChanged(user => {\r\n      if (user) {\r\n        console.log(user);\r\n        this.setState({ user });\r\n        this.props.setUser(user);\r\n        this.setState({\r\n          loading: false\r\n        });\r\n      } else {\r\n        console.log(\"no user!!!!\");\r\n        this.props.clearUser()\r\n        this.setState({\r\n          user: null,\r\n          loading: false\r\n        });\r\n      }\r\n    });\r\n  }\r\n  render() {\r\n    const { user, loading } = this.state;\r\n    return (\r\n      <div className=\"\">\r\n        {loading ? (\r\n          <Dimmer active>\r\n            <Loader active size=\"big\" content=\"Loading your chat\" />\r\n          </Dimmer>\r\n        ) : (\r\n          <Layout/>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  null,\r\n  { setUser, clearUser }\r\n)(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\n\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}